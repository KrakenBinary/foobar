#!/usr/bin/python
# -*- coding:utf-8 -*-
'''
test
'''
import unittest
import solution


class TestStringMethods(unittest.TestCase):
    '''
    notes here
    '''
    def test_case1(self):
        '''provided test 1'''
        self.assertEqual(solution.solution([
                                            [0, 2, 2, 2, -1],
                                            [9, 0, 2, 2, -1],
                                            [9, 3, 0, 2, -1],
                                            [9, 3, 2, 0, -1],
                                            [9, 3, 2, 2, 0]], 1), [1, 2])

    def test_case2(self):
        '''provided test 2'''
        self.assertEqual(solution.solution([
                                            [0, 1, 1, 1, 1],
                                            [1, 0, 1, 1, 1],
                                            [1, 1, 0, 1, 1],
                                            [1, 1, 1, 0, 1],
                                            [1, 1, 1, 1, 0]], 3), [0, 1])

    def test_hidden1(self):
        '''all 0's'''
        self.assertEqual(solution.solution([
                                            [0, 0, 0, 0, 0],
                                            [0, 0, 0, 0, 0],
                                            [0, 0, 0, 0, 0],
                                            [0, 0, 0, 0, 0],
                                            [0, 0, 0, 0, 0]], 3), [0, 1, 2])

    def test_hidden7(self):
        '''faulty self'''
        self.assertEqual(solution.solution([
                                            [0, 1, 1, 1, 1],
                                            [1,-1, 1, 1, 1],
                                            [1, 1, 0, 1, 1],
                                            [1, 1, 1, 0, 1],
                                            [1, 1, 1, 1, 0]], 3), [0, 1, 2])

    def test_hidden7(self):
        '''not enough time ... what should the anwser be? None?'''
        self.assertEqual(solution.solution([
                                            [0, 1, 1, 1, 1],
                                            [1, 0, 1, 1, 1],
                                            [1, 1, 0, 1, 1],
                                            [1, 1, 1, 0, 1],
                                            [1, 1, 1, 1, 0]], -3), None)


if __name__ == '__main__':
    unittest.main()
